rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isApprovedTeacher() {
      return isAuthenticated() && exists(/databases/$(database)/documents/teachers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.status == 'approved';
    }

    function isApprovedSchool() {
      return isAuthenticated() && exists(/databases/$(database)/documents/schools/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/schools/$(request.auth.uid)).data.status == 'approved';
    }

    // Keep it simple - just check authentication
    // All access control handled at UI level

    // Rules for admins collection
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated(); // Temporarily allow any authenticated user to create admin
      // allow write: if isAdmin(); // RESTORE THIS AFTER CREATING FIRST ADMIN
    }

    // Rules for teachers collection
    match /teachers/{teacherId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == teacherId;
      allow update: if isAuthenticated() && (request.auth.uid == teacherId || isAdmin());
      allow delete: if isAdmin();
    }

    // Rules for schools collection
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      allow delete: if isAdmin();
      
      // Rules for school team members subcollection
      match /teachers/{teacherId} {
        allow read, write: if isAuthenticated();
        allow delete: if isAuthenticated();
      }
    }

    // Rules for replacement offers
    match /replacement-offers/{offerId} {
      allow read, write: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Rules for applications
    match /applications/{applicationId} {
      allow read, write: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // Rules for conversations
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated();
    }

    // Rules for messages
    match /messages/{messageId} {
      allow read, write: if isAuthenticated();
    }

    // Rules for notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Rules for favorite schools
    match /favorite_schools/{favoriteId} {
      allow read: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.teacherId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
    }

    // Catch-all rule for any other collections (temporary for debugging)
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
}